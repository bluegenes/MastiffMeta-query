EXEC="cargo run -p branchwater-index --release -- "

rule all:
#    input: "outputs/rs207"
#    input: "outputs/rs207-2k"
#    input: expand("outputs/genbank-{domain}", domain=["archaea", "bacteria", "fungi", "protozoa", "viral"])
    input: "../bw_db/"

##################################

def demo_sraids(wildcards):
    from pathlib import Path

    datasets = Path("inputs/demo_sraids").read_text().splitlines()
    return [f"outputs/wort/{sra_id}.sig" for sra_id in datasets]

rule merge_demo_sigs:
  output: "sigs/demo.zip"
  input:
    sraids="inputs/demo_sraids",
    sigs=demo_sraids,
  shell: """
    sourmash sig cat {input.sigs} -o {output}
  """

rule demo_index:
  output: directory("outputs/demo")
  input: "sigs/demo.zip"
  shell: """
    {EXEC} index -k 21 -s 1000 \
        --output {output} \
        {input}
  """

rule prepare_index:
  output: directory("../bw_db/")
  input:
    sigs="sigs/demo.zip",
    sraids="inputs/demo_sraids",
    index=directory("outputs/demo")
  shell: """
    mkdir -p {output}
    cp -a {input.index} {output}/index
    cp {input.sigs} {output}/sigs.zip
    cp {input.sraids} {output}/sraids
  """

#################################

rule download_from_wort:
  output: "outputs/wort/{sraid}.sig"
  params:
    sraid="{sraid}"
  shell: """
    curl -JLf https://wort.sourmash.bio/v1/view/sra/{params.sraid} -o {output}
  """

#################################

rule download_demo_runinfo:
  output: 'inputs/demo_runinfo.csv'
  params:
    query = lambda w: " OR ".join(f'{sra_id}[Accession]' for sra_id in DEMO_SRAIDS)
  shell: """
    esearch -db sra -query '{params.query}' | efetch -format runinfo > {output}
  """

rule subset_columns:
  output: "outputs/{sample}_sraids"
  input:
    runinfo="inputs/{sample}_runinfo.csv"
  run:
    import csv

    with open(input.runinfo, "r") as f:
        datasets = csv.DictReader(f, delimiter=",")

        with open(output[0], 'w', newline='') as g:
            writer = csv.writer(g)

            for row in datasets:
                writer.writerow(row["Run"])

#################################

rule catalog_metagenomes:
    output:
        catalog="outputs/20241128-metagenomes-catalog",
    input:
        acclist="inputs/20241128.acclist",
        basepath="/data/wort/wort-sra/"
    run:
        import csv
        from pathlib import Path

        # load all sra IDs
        sraids = set()
        with open(input.acclist) as fp:
            data = csv.DictReader(fp, delimiter=",")
            for dataset in data:
                if dataset['acc'] != 'acc':
                    sraids.add(dataset['acc'])

        path = Path(input.basepath)
        with open(output.catalog, 'w') as out:
            # check if sraids exist on disk
            for sra_id in sraids:
                sig_path = path / "sigs" / f"{sra_id}.sig"
                if sig_path.exists():
                    out.write(f"{sig_path}\n")
                    out.flush()

rule manifest_from_catalog_full:
    output:
        manifest="outputs/20241128-metagenomes-s1000.manifest",
    input:
        catalog="outputs/20241128-metagenomes-catalog.available",
        removed="inputs/20241128.removed",
    threads: 24,
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} manifest \
            --output {output} \
            --basepath /data/wort/wort-sra \
            <(cat {input.catalog} {input.removed})
    """

rule manifest_subset:
  output:
    manifest="outputs/20240420-metagenomes-k{ksize}-s1000.manifest",
  input:
    full_manifest="outputs/20240420-metagenomes-s1000.manifest",
  params:
    ksize = "{ksize}"
  threads: 24,
  run:
    import csv

    with open(input.full_manifest, "r") as fp:
        sourmash_id = next(fp)
        csv_header = next(fp).strip().split(",")
            
        data = csv.DictReader(fp, delimiter=",", fieldnames=csv_header)

        with open(output[0], 'w', newline='') as g:
            g.write(sourmash_id)
            out = csv.DictWriter(g, csv_header, delimiter=",")
            out.writeheader()

            for row in data:
                if row["ksize"] == params.ksize:
                    out.writerow(row)

rule previous_manifest:
    output:
        manifest="outputs/20230814-metagenomes-k21-s1000.manifest",
    input:
        database="/scratch/mastiff/2023.08.14/metag"
    threads: 24,
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} metadata \
            --output {output} \
            {input.database}
    """

rule sync_with_previous_manifest:
  output:
    manifest="outputs/20241128-metagenomes-k{ksize}-s1000.synced.manifest",
  input:
    previous_manifest="outputs/20230814-metagenomes-k21-s1000.manifest",
    manifest="outputs/20241128-metagenomes-s1000.manifest",
  params:
    ksize = "{ksize}"
  threads: 24,
  run:
    import csv

    with open(input.manifest, "r") as fp:
        sourmash_id = next(fp)
        csv_header = next(fp).strip().split(",")

        data = csv.DictReader(fp, delimiter=",", fieldnames=csv_header)
        new_data = {}
        for row in data:
            if row['ksize'] == params.ksize:
              new_data[row['name']] = row

    with open(output[0], 'w', newline='') as g:
        g.write(sourmash_id)
        out = csv.DictWriter(g, csv_header, delimiter=",")
        out.writeheader()

        with open(input.previous_manifest, "r") as fp:
            sourmash_id = next(fp)
            csv_header = next(fp).strip().split(",")
                
            data = csv.DictReader(fp, delimiter=",", fieldnames=csv_header)

            for row in data:
                new_row = new_data.pop(row["name"])
                assert new_row["ksize"] == params.ksize
                out.writerow(new_row)

        for row in new_data.values():
            out.writerow(row)
	
rule metag_k31:
    output: directory("outputs/20241128")
    input:
      storage="/data/wort/wort-sra",
      manifest="outputs/20241128-metagenomes-k31-s1000.synced.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} index -k 31 -s 1000 \
          --output {output} \
          --manifest {input.manifest} \
          {input.storage}
    """

rule metag_debug:
    output: directory("outputs/20241128-debug")
    input:
      storage="/data/wort/wort-sra",
      manifest="outputs/20241128-metagenomes-k31-s1000.synced.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} index -k 31 -s 1000 \
          --output {output} \
          --manifest <(head -102 {input.manifest}) \
          {input.storage}
    """

#################################

rule rs207_1k:
    output: directory("outputs/rs207-1k")
    input:
      storage="inputs/gtdb-rs207.genomic-reps.dna.k21.zip",
      manifest="inputs/gtdb-rs207.genomic-reps.dna.k21.manifest"
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} index -k 21 -s 1000 \
          --output {output} \
          --manifest <(head -1002 {input.manifest}) \
          {input.storage}
    """

rule rs207_2k:
    output: directory("outputs/rs207-2k")
    input:
        previous="outputs/rs207-1k",
        storage="inputs/gtdb-rs207.genomic-reps.dna.k21.zip",
        manifest="inputs/gtdb-rs207.genomic-reps.dna.k21.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        cp -a {input.previous} {output}
        {EXEC} update -k 21 -s 1000 \
          --output {output} \
          --manifest <(head -2002 {input.manifest}) \
          {input.storage}
    """

rule rs_207:
    output: directory("outputs/rs207")
    input: "inputs/gtdb-rs207.genomic-reps.dna.k21.zip"
    shell: """
        {EXEC} index -k 21 -s 1000 \
            --output {output} \
            {input}
    """

rule download_rs_207:
    output: "inputs/gtdb-rs207.genomic-reps.dna.k21.zip"
    shell: """
        curl -L https://osf.io/download/f2wzc/ -o {output}
    """

rule extract_rs_207_manifest:
    output: "inputs/gtdb-rs207.genomic-reps.dna.k21.manifest"
    input: "inputs/gtdb-rs207.genomic-reps.dna.k21.zip"
    shell: """
        unzip -p {input} SOURMASH-MANIFEST.csv > {output}
    """

#######################################################################

rule metag_100:
    output: directory("outputs/metag-100")
    input:
      storage="/data/wort/wort-sra",
      manifest="outputs/metagenomes-k21-s1000.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} index -k 21 -s 1000 \
          --output {output} \
          --manifest <(head -102 {input.manifest}) \
          {input.storage}
    """

rule metag_200:
    output: directory("outputs/metag-200")
    input:
      previous="outputs/metag-100",
      storage="/data/wort/wort-sra",
      manifest="outputs/metagenomes-k21-s1000.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        cp -a {input.previous} {output}
        {EXEC} update -k 21 -s 1000 \
          --output {output} \
          --manifest <(head -202 {input.manifest}) \
          {input.storage}
    """

rule metag:
    output: directory("outputs/metag")
    input:
      storage="/data/wort/wort-sra",
      manifest="outputs/metagenomes-k21-s1000.manifest",
    threads: 24
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} index -k 21 -s 1000 \
          --output {output} \
          --manifest {input.manifest} \
          {input.storage}
    """

#######################################################################

rule manifest_test:
    output:
        manifest="inputs/metagenomes-k{ksize}-s1000-test.manifest",
    input:
        catalog="outputs/metagenomes-catalog",
    threads: 24,
    shell: """
        export RAYON_NUM_THREADS={threads}
        RUST_LOG=info {EXEC} manifest -k 21 \
            --output {output} \
            --basepath /data/wort/wort-sra \
            <(head -2000 {input.catalog})
    """

#######################################################################

rule genbank:
    output: directory("outputs/genbank-{domain}")
    input: "/data/wort/databases/genbank-2022.03-{domain}-k21.zip"

    shell: """
        {EXEC} index -k 21 -s 1000 \
            --output {output} \
            {input}
    """

#######################################################################

"""
{EXEC} index -k 21 -s 1000 --output /scratch/analysis/rocksdb_metagenomes catalog_metagenomes
{EXEC} index -k 21 -s 10000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head 1000)
{EXEC} index -k 21 -s 1000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head -n 10)
{EXEC} index -k 21 -s 10000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head -n 10)
{EXEC} index -k 21 -s 10000 --output /scratch/analysis/rocksdb_metagenomes2 <(cat catalog_metagenomes | head -n 1000)
{EXEC} index -k 51 -s 1000 --output bacteria-100k-enum flist
{EXEC} index -k 51 -s 1000 --output bacteria-100k-cf <(head -1 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-1k-cf (head -1000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-1k-cf $(head -1000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-10k-cf <(head -10000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-100k-cf flist
{EXEC} index -k 51 -s 1000 --output bacteria-1k-cf-opts <(head -1000 flist)
{EXEC} index -k 51 -s 1000 --output bacteria-100k-cf-opts flist
"""
